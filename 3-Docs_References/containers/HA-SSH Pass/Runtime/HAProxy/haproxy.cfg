global
    # Define Minimum TLS/SSL Version Supported
    ssl-default-bind-options ssl-min-ver TLSv1.2  

    # This will output all logs in their raw format to local0 so that we can see all logs
    # It is possible to forward them to a specific service or container.
    log stdout format raw local0

    # Set Maximum number of connections to 20
    maxconn  20
defaults
    # Enable global logging in all FE and BE
    log global
    # Enable more verbose HTTP logging
    option httplog
    # Set default mode of FE and BE to http (overridden individually)
    mode http
    
    # Set timeout for attempts at connections
    timeout connect 5s
    # Set client timeout at 20s, if the client stops sending packets for 20 seconds close the connection
    timeout client 20s
    # Set serve timeout at 20s, if the server stops sending packets for 20 seconds close the connection
    timeout server 20s

# Define a resolver section for DNS resolution 
# Accessed through the tcp-content do-resolve action
resolvers swarm_internal
    # Define the max payload size accepted 
    accepted_payload_size 8192

    # Define the nameserver(s) that this resolver will use
    # Use the Swarm resolver at ist default location
    nameserver dns 127.0.0.11:53

    # Max number of retires for resolution sent to the resolver 
    resolve_retries 3
    # Default time to trigger name resolutions 
    timeout resolve 1s
    # Time that is waited between DNS queries when no valid response is received
    timeout retry 1s

    # Hold defines the amount of time the last name resolution should be kept
    # Base on the last resolution status. This can be results that lead to it being up, or down. 

    # If OTHER status hold it for 30s
    hold other           30s
    # If refused hold it for 30s
    hold refused         30s
    # If non-existent hold for 30s 
    hold nx              30s
    # If request timeout hold for 30s 
    hold timeout         30s
    # If the request is received and valid 10s
    hold valid           10s
    # If it is obsolete hold for 30s
    hold obsolete        30s

# Define a frontend to handel SSH connections
frontend ssh_handler
    # Set mode to TCP, go against the default of HTTP
    mode tcp
    # Bind on listening for all traffic on port 2222
    # We chose 2222 so it mirrrors the docker port mapping
    # Use SSL certificate
    bind *:2222 ssl crt /usr/local/etc/haproxy/haproxy1.pem

    # Wait 5 seconds before closing connection  
    tcp-request inspect-delay 5s
    # This req.payload extracts the binary contents at position 0 with a length of 7 bytes
    # The ACL takes a value of it being compaired to the string SSH-2.0
    acl valid_payload req.payload(0,7) -m str "SSH-2.0"

    # Reject the TCP Connection if the payload is not valid (not SSH connection determined above)
    tcp-request content reject if !valid_payload
    # Accep the TCP Connection if the payload is valid (is SSH ad determined above)
    tcp-request content accept if { req_ssl_hello_type 1 }

    # This is from HAProxy, it is a log format that will allow us to get destination hints from the SSH command
    log-format "%ci:%cp [%t] %ft %b/%s %Tw/%Tc/%Tt %B %ts %ac/%fc/%bc/%sc/%rc %sq/%bq dstName:%[var(sess.dstName)] dstIP:%[var(sess.dstIP)] "

    # Use the resolver to resolve an IPv4 address, asave it to destIP variable in memory. This is done based on the input ssl_fc_sni 
    # ssl_fc_sni is a locally extracted variable from the TLS/SSL conntection the Server Name Indication feild.
    tcp-request content do-resolve(sess.dstIP,swarm_internal,ipv4) ssl_fc_sni
    # Saves TCP req content in an accessable in memory value of the logged feild
    tcp-request content set-var(sess.dstName) ssl_fc_sni

    # Use a single backend with the resolved IP to route 
    #default_backend be_ssh_all
    default_backend be_ssh_all

# Define a frontend, and give it a name (this name is used in the logging!)
frontend fe_http
    # Explicitly define the mode (not needed due to defaults)
    mode http

    # bind (listen) on port 80 all (*) incoming traffic will be caught and apply all following rules and forwarding to received traffic
    bind *:80
    # bind (listen) on port 443 all (*) incoming traffic will be caught and apply all following rules and forwarding to received traffic
    # We will establish the TLS connection with the ssl certificate at the following path 
    bind *:443 ssl crt /usr/local/etc/haproxy/haproxy1.pem

    # This defines actions to take on HTTP requests
    # This will redirect HTTP requests to the HTTPS scheme unless it is already a HTTP/SSL connection
    http-request redirect scheme https unless { ssl_fc }

    # We can create access control lists to filter traffic based on certain conditions, in this case we want to remove access to the admin page.
    acl restricted_page path_beg, url_dec -i /admin
    # This defines the default backend to use, we will forward traffic unless the request is to the restricted page. 
    use_backend be_http unless restricted_page

# Define backend, and give it a name (this name is used in the logging!)
backend be_http
    # Explicitly define the mode (not needed due to defaults)
    mode http 

    # Define the load balancing type (default is RoundRobin)
    balance roundrobin

    # List of servers, they each have a name and route to a server using (docker) DNS on their desired port (8000)
    # They have the form server <nameLog> <Hostname/IP:Port> options
    # check specifies that health checks should occur
    server node1 web1:8000 
    server node  web2:8000

# Backend for SSH with resolved IPs through the docker swarm DNS
backend be_ssh_all 
    # Set mode to TCP, go against the default of HTTP
    mode tcp

    # Limit access by using an ACL to limit the allowed IPs
    # These are true if destIP is equal to the "ip X.X.X.X" 
    # acl allowed_destination var(sess.dstIP) -m ip 
    # acl allowed_destination var(sess.dstIP) -m ip 

    # We can filter based on the resolved hostname as well further restricting access
    #acl allowed_server_names var(sess.dstName)
    #acl allowed_server_names var(sess.dstName) 

    # Edit the TCP requests destination to be the resolved IP
    tcp-request content set-dst var(sess.dstIP)

    # Accept the request if the requested server is valid
    #tcp-request content accept if allowed_server_names
    # Accept the request if the resolved IP is valid
    #tcp-request content accept if allowed_destination
    # Reject the tcp request if it has not been accepted 
    #tcp-request content reject

    # Broadcast to server?
    server ssh 0.0.0.0:22

# Hardcoded backends for method 2
backend be_web1
    mode tcp
    server s1 web1:22
backend be_web2:
    mode tcp
    server s1 web2:22
